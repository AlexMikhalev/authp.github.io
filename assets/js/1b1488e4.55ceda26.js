"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6299],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),u=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return o.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),h=a,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||r;return t?o.createElement(m,l(l({ref:n},c),{},{components:t})):o.createElement(m,l({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<r;u++)l[u]=t[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5022:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),l=["components"],i={sidebar_position:9},s="Access Lists and Role-based Access Control (RBAC)",u={unversionedId:"authorize/acl-rbac",id:"authorize/acl-rbac",isDocsHomePage:!1,title:"Access Lists and Role-based Access Control (RBAC)",description:"The allow and deny directives are the series of entries defining how to",source:"@site/docs/authorize/acl-rbac.md",sourceDirName:"authorize",slug:"/authorize/acl-rbac",permalink:"/docs/authorize/acl-rbac",editUrl:"https://github.com/authp/authp.github.io/edit/main/docs/authorize/acl-rbac.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Auto-Redirect URL",permalink:"/docs/authorize/auto-redirect-url"},next:{title:"Path-Based Access Lists",permalink:"/docs/authorize/path-acl"}},c=[{value:"Sources of Role Information",id:"sources-of-role-information",children:[],level:2},{value:"Anonymous Role",id:"anonymous-role",children:[],level:2},{value:"Granting Access with Access Lists",id:"granting-access-with-access-lists",children:[{value:"Comment",id:"comment",children:[],level:3},{value:"Conditions",id:"conditions",children:[],level:3},{value:"Actions",id:"actions",children:[],level:3},{value:"ACL Shortcuts",id:"acl-shortcuts",children:[],level:3},{value:"Primer",id:"primer",children:[],level:3}],level:2},{value:"Default Allow ACL",id:"default-allow-acl",children:[],level:2},{value:"Forbidden Access",id:"forbidden-access",children:[],level:2}],p={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"access-lists-and-role-based-access-control-rbac"},"Access Lists and Role-based Access Control (RBAC)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"deny"),' directives are the series of entries defining how to\nauthorize claims. In the above example, the plugin authorizes access for the holders of "roles"\nclaim where values are any of the following: "anonymous", "guest", "admin".'),(0,r.kt)("h2",{id:"sources-of-role-information"},"Sources of Role Information"),(0,r.kt)("p",null,"By default, the plugin finds role information in the following token fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"roles")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"role")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"group")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"groups")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"app_metadata")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"authorization")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"roles")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"realm_access")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"roles"))),(0,r.kt)("p",null,"In the below example, the use has a single role, i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "exp": 1596031874,\n  "sub": "jsmith",\n  "name": "Smith, John",\n  "email": "jsmith@gmail.com",\n  "roles": [\n    "anonymous"\n  ],\n  "origin": "localhost"\n}\n')),(0,r.kt)("p",null,"Additionally, the token validation component of the plugin recognized that roles\nmay be in other parts of a token, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"app_metadata - authorization - roles"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "app_metadata": {\n    "authorization": {\n      "roles": ["admin", "editor"]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Additionally, ",(0,r.kt)("inlineCode",{parentName:"p"},"realm_access")," - ",(0,r.kt)("inlineCode",{parentName:"p"},"roles"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "realm_access": {\n    "roles": ["admin", "editor"]\n  }\n}\n')),(0,r.kt)("p",null,"References:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://auth0.com/docs/users/concepts/overview-user-metadata"},"Auth0 Docs - App Metadata")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.netlify.com/visitor-access/role-based-access-control/#external-providers"},"Netlify - Role-based access control with JWT - External providers"))),(0,r.kt)("h2",{id:"anonymous-role"},"Anonymous Role"),(0,r.kt)("p",null,"By default, if the plugin does not find role information in JWT token, then\nautomatically treats the token having the following two roles:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"anonymous")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"guest"))),(0,r.kt)("p",null,"For example, it happens when:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"roles")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"app_metadata")," are not present in a token"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"app_metadata")," does not contain ",(0,r.kt)("inlineCode",{parentName:"li"},"authorization"))),(0,r.kt)("h2",{id:"granting-access-with-access-lists"},"Granting Access with Access Lists"),(0,r.kt)("p",null,"Access list rule consists of 3 sections:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Comment"),(0,r.kt)("li",{parentName:"ul"},"Conditions"),(0,r.kt)("li",{parentName:"ul"},"Actions")),(0,r.kt)("p",null,"The rule has the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"acl rule {\n  comment\n  conditions\n  action\n}\n")),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"acl rule {\n  comment Allow viewer and editor access, log, count, and stop processing\n  match roles viewer editor\n  allow stop counter log debug\n}\n")),(0,r.kt)("h3",{id:"comment"},"Comment"),(0,r.kt)("p",null,"The comment section is a string to identify a rule."),(0,r.kt)("p",null,"The section is a single statement."),(0,r.kt)("h3",{id:"conditions"},"Conditions"),(0,r.kt)("p",null,"The conditions section consists of one or more statements matching the fields\nof a token."),(0,r.kt)("p",null,"There are the types of conditions:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"match the value of a particular token field, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"roles")),(0,r.kt)("li",{parentName:"ol"},"match the HTTP method, e.g. GET, POST, etc."),(0,r.kt)("li",{parentName:"ol"},"match the HTTP URI path, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"/api"))),(0,r.kt)("p",null,"The condition syntax follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[exact|partial|prefix|suffix|regex|always] match <field> <value> ... <valueN>\n[exact|partial|prefix|suffix|regex|always] match method <http_method_name>\n[exact|partial|prefix|suffix|regex|always] match path <http_path_uri>\n")),(0,r.kt)("p",null,"The special use case is the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"any")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"always")," keyword. If provided,\nit matches any value in a token field. It is synonymous to the field being\npresent. For example, the following condition match when a token has ",(0,r.kt)("inlineCode",{parentName:"p"},"org"),"\nfield. The value of the field is not being checked"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"always match org any\n")),(0,r.kt)("p",null,"The following conditions match when a token has ",(0,r.kt)("inlineCode",{parentName:"p"},"roles")," field with the values\nof either ",(0,r.kt)("inlineCode",{parentName:"p"},"viewer")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"editor")," and has ",(0,r.kt)("inlineCode",{parentName:"p"},"org")," field with the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"nyc"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"match roles viewer editor\nmatch org nyc\n")),(0,r.kt)("p",null,"The following conditions match when a token has ",(0,r.kt)("inlineCode",{parentName:"p"},"roles")," field with the values\nof either ",(0,r.kt)("inlineCode",{parentName:"p"},"viewer")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"editor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"org")," field begins with ",(0,r.kt)("inlineCode",{parentName:"p"},"ny"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"match roles viewer editor\nprefix match org ny\n")),(0,r.kt)("h3",{id:"actions"},"Actions"),(0,r.kt)("p",null,"The actions section is a single line instructing how to deal with a token\nwhich matches the conditions."),(0,r.kt)("p",null,"The potential values for actions follow. Please note the first keyword\ncould be ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"deny"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"allow\nallow counter\nallow counter log <error|warn|info|debug>\nallow log <error|warn|info|debug>\nallow log <error|warn|info|debug> tag <value>\nallow stop\nallow stop counter\nallow stop counter log <error|warn|info|debug>\nallow stop log <error|warn|info|debug>\nallow any\nallow any counter\nallow any counter log <error|warn|info|debug>\nallow any log <error|warn|info|debug>\nallow any stop\nallow any stop counter\nallow any stop counter log <error|warn|info|debug>\nallow any stop log <error|warn|info|debug>\n")),(0,r.kt)("p",null,"By default the ACL rule hits are not being logged or counted."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"log <error|warn|info|debug>")," keyword enables the logging of rule hits.\nIf the log level is not being set, it defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tag")," keyword instructs the plugin to add a tag to the log output."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"counter")," keyword enables the counting of hits. The counters could be\nexposed with prometheus exporter."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"stop")," keyword instructs the plugin to stop processing ACL rules after\nthe processing the one with the ",(0,r.kt)("inlineCode",{parentName:"p"},"stop")," keyword."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"any")," keyword instructs the plugin to trigger actions when any of the\nconditions match. By default, all the conditions must match to trigger\nactions."),(0,r.kt)("h3",{id:"acl-shortcuts"},"ACL Shortcuts"),(0,r.kt)("p",null,"Here are the patterns of one-liner allowed for use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"allow roles viewer editor with method get /internal/dashboard\nallow roles viewer editor with method post\ndeny roles anonymous guest with method get /internal/dashboard\ndeny roles anonymous guest with method post\nallow roles anonymous guest\nallow audience https://localhost/ https://example.com/\n")),(0,r.kt)("h3",{id:"primer"},"Primer"),(0,r.kt)("p",null,"In this example, the user logging via Facebook Login would get role ",(0,r.kt)("inlineCode",{parentName:"p"},"user"),"\nadded to his/her roles. The ",(0,r.kt)("inlineCode",{parentName:"p"},"acl rule")," directives specify matches and actions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'localhost, 127.0.0.1 {\n  route /auth* {\n    authp {\n      backends {\n        github_oauth2_backend {\n          method oauth2\n          realm github\n          provider github\n          client_id Iv1.foobar\n          client_secret barfoo\n          scopes user\n        }\n      }\n      ui {\n        links {\n          "My Identity" "/auth/whoami" icon "las la-star"\n          "My Settings" /auth/settings icon "las la-cog"\n          "Guests" /guest/\n          "Users" /app/\n          "Administrators" /admin/\n        }\n      }\n      transform user {\n        exact match sub 123456789\n        exact match origin facebook\n        action add role user\n      }\n      enable source ip tracking\n    }\n  }\n\n  route /prometheus* {\n    authorize {\n      primary yes\n      allow roles authp/admin authp/user authp/guest\n      allow roles admin user guest\n      validate bearer header\n      set auth url /auth\n      inject headers with claims\n    }\n    respond * "prometheus" 200\n  }\n\n  route /guest* {\n    authorize {\n      acl rule {\n        comment allow guests only\n        match role guest\n        allow stop log error\n      }\n      acl rule {\n        comment default deny\n        always match iss any\n        deny log error\n      }\n    }\n    respond * "my app - guests only" 200\n  }\n\n  route /app* {\n    authorize {\n      acl rule {\n        match role user admin\n        allow stop log error\n      }\n      acl rule {\n        always match iss any\n        deny log error\n      }\n    }\n    respond * "my app - standard users and admins" 200\n  }\n\n  route /admin* {\n    authorize {\n      acl rule {\n        match role admin\n        allow stop log error\n      }\n    }\n    respond * "my app - admins only" 200\n  }\n\n  route /version* {\n    respond * "1.0.0" 200\n  }\n\n  route {\n    # trace tag="default"\n    redir https://{hostport}/auth/login 302\n  }\n}\n')),(0,r.kt)("p",null,"The log messages would look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'ERROR   http.authentication.providers.authorize       acl rule hit    {"action": "deny", "tag": "rule1", "user": {"addr":"10.0.2.2","iss":"https://localhost:8443/auth/oauth2/facebook/authorization-code-callback","jti":"yrQcSolE6SZAPeY38szaNQbtUtfyrj0HmfEq8hvL","name":"Paul Greenberg","origin":"facebook","roles":["user","authp/guest"],"sub":"10158919854597422"}}\n')),(0,r.kt)("h2",{id:"default-allow-acl"},"Default Allow ACL"),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"authorize"),' configuration contains the following directive, then the "catch-all"\naction is ',(0,r.kt)("inlineCode",{parentName:"p"},"allow"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"authorize {\n  acl default allow\n}\n")),(0,r.kt)("h2",{id:"forbidden-access"},"Forbidden Access"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"caddyauth.Authenticator")," plugins should not set header or payload of the\nresponse. However, caddy, by default, responds with 401 (instead of 403),\nbecause ",(0,r.kt)("inlineCode",{parentName:"p"},"caddyauth.Authenticator")," does not distinguish between authorization (403)\nand authentication (401)."),(0,r.kt)("p",null,"The plugin's default behaviour is responding with ",(0,r.kt)("inlineCode",{parentName:"p"},"403 Forbidden"),"."),(0,r.kt)("p",null,"However, one could use the ",(0,r.kt)("inlineCode",{parentName:"p"},"set forbidden url")," Caddyfile directive to redirect\nusers to a custom 403 page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"authorize {\n  set forbidden url /custom_403.html\n}\n")))}d.isMDXComponent=!0}}]);