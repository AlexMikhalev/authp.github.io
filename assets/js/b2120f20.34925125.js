"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3349],{3905:(e,t,n)=>{n.d(t,{Zo:()=>k,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),c=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},k=function(e){var t=c(e.components);return i.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,k=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,y=u["".concat(p,".").concat(m)]||u[m]||s[m]||a;return n?i.createElement(y,o(o({ref:t},k),{},{components:n})):i.createElement(y,o({ref:t},k))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},570:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const a={sidebar_position:7},o="Token Verification",l={unversionedId:"authorize/token-verification",id:"authorize/token-verification",title:"Token Verification",description:"Find the information about the various algorithms described below in",source:"@site/docs/authorize/token-verification.md",sourceDirName:"authorize",slug:"/authorize/token-verification",permalink:"/docs/authorize/token-verification",draft:!1,editUrl:"https://github.com/authp/authp.github.io/edit/main/docs/authorize/token-verification.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"IP Address Filtering",permalink:"/docs/authorize/ip-filter"},next:{title:"Auto-Redirect URL",permalink:"/docs/authorize/auto-redirect-url"}},p={},c=[{value:"Verification with Shared Secret",id:"verification-with-shared-secret",level:2},{value:"Verification with RSA and ECDSA Keys",id:"verification-with-rsa-and-ecdsa-keys",level:2},{value:"Generate RSA Public Key",id:"generate-rsa-public-key",level:3},{value:"Generate ECDSA Public Key",id:"generate-ecdsa-public-key",level:3}],k={toc:c};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"token-verification"},"Token Verification"),(0,r.kt)("p",null,"Find the information about the various algorithms described below in\n",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7518"},"RFC 7518"),"."),(0,r.kt)("h2",{id:"verification-with-shared-secret"},"Verification with Shared Secret"),(0,r.kt)("p",null,"The shared secret methods are based on Hash-based Message Authentication Code\n(HMAC) algorithm, where the hash is being computed using SHA256, SHA384, and\nSHA512 hash functions."),(0,r.kt)("p",null,"The supported methods for the verification of token signatures are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HS256")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HS384")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HS512"))),(0,r.kt)("p",null,'The following Caddyfile directives set the default token verification key to\n"shared" (symmetric) key with the value of ',(0,r.kt)("inlineCode",{parentName:"p"},"383aca9a-1c39-4d7a-b4d8-67ba4718dd3f"),".\nIt also sets a custom token name. The plugin would search for tokens with\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"app_token")," name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{\n  security {\n    authorization policy mypolicy {\n      crypto key verify 383aca9a-1c39-4d7a-b4d8-67ba4718dd3f\n      crypto key token name app_token\n    }\n  }\n}\n\nassetq.myfiosgateway.com {\n  authorize with mypolicy\n  root * {env.HOME}/www\n  file_server\n}\n")),(0,r.kt)("p",null,"The syntax is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"crypto key verify <SHARED_SECRET>\ncrypto key token name <TOKEN_NAME>\n")),(0,r.kt)("p",null,"Alternatively, the key could be set via environment variables. The\n",(0,r.kt)("inlineCode",{parentName:"p"},"from env APP_TOKEN")," instructs the plugin to load the key from\n",(0,r.kt)("inlineCode",{parentName:"p"},"APP_TOKEN")," environment variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{\n  security {\n    authorization policy mypolicy {\n      crypto key verify from env APP_TOKEN\n      crypto key token name app_token\n    }\n  }\n}\n\nassetq.myfiosgateway.com {\n  authorize with mypolicy\n  root * {env.HOME}/www\n  file_server\n}\n")),(0,r.kt)("p",null,"The syntax is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"crypto key verify from env <NAME>\ncrypto key token name <TOKEN_NAME>\n")),(0,r.kt)("p",null,"Additionally, the key may have a key ID. It is otherwise known as ",(0,r.kt)("inlineCode",{parentName:"p"},"kid"),".\nIt could be passed via right after the ",(0,r.kt)("inlineCode",{parentName:"p"},"crypto key")," keywords."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{\n  security {\n    authorization policy mypolicy {\n      crypto key e5ZaB46bF27d verify 383aca9a-1c39-4d7a-b4d8-67ba4718dd3f\n      crypto key e5ZaB46bF27d token name app_token\n      crypto key 3bc4be49abf6 verify from env SECRET_TOKEN\n      crypto key 3bc4be49abf6 token name secret_token\n    }\n  }\n}\n\nassetq.myfiosgateway.com {\n  authorize with mypolicy\n  root * {env.HOME}/www\n  file_server\n}\n")),(0,r.kt)("p",null,"The syntax is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"crypto key <ID> verify <SHARED_SECRET>\ncrypto key <ID> verify from env <NAME>\ncrypto key <ID> token name <TOKEN_NAME>\n")),(0,r.kt)("h2",{id:"verification-with-rsa-and-ecdsa-keys"},"Verification with RSA and ECDSA Keys"),(0,r.kt)("p",null,"The RSA and ECDSA methods are based on asymmetric signature algorithms\ndefined in ",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7518"},"RFC7518"),"."),(0,r.kt)("p",null,"The supported RSA methods are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RS256"),": RSASSA-PKCS1-v1_5 using SHA-256"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RS384")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RS512"))),(0,r.kt)("p",null,"The DSA are based on the Elliptic Curve Digital Signature Algorithm (ECDSA).\nSee ",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7518#section-3.4"},"RFC7518 Section 3.4"),"\nfor details."),(0,r.kt)("p",null,"The supported DSA methods are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ES256"),": ECDSA using P-256 and SHA-256 (SHA256withECDSA)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The Elliptic Curve has 256-bit integer prime."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ES384"),": ECDSA using P-384 and SHA-384 (SHA384withECDSA)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The Elliptic Curve has 384-bit integer prime."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ES512"),": ECDSA using P-521 and SHA-512 (SHA512withECDSA)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The Elliptic Curve has 512-bit integer prime.")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"P-256")," curve (aka prime256v1) is being used in U2F and CBOR."),(0,r.kt)("p",null,'The verification of the tokens is being done by "public" RSA or ECDSA keys.\nIf the plugin finds a "private" key, it would extract "public" key from it\nand that key would be used to verify tokens.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"verify")," keyword is used when the keys provided are public keys.\nOtherwise, user ",(0,r.kt)("inlineCode",{parentName:"p"},"sign-verify")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"auto"),"."),(0,r.kt)("p",null,"The following Caddyfile directives configure multiple token verification\nkeys."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The default key ID (aka kid 0) is defined when the key ID value is\nnot provided. Loads the key from ",(0,r.kt)("inlineCode",{parentName:"li"},"/etc/gatekeeper/auth/jwt/verify_key1.pem")," file."),(0,r.kt)("li",{parentName:"ol"},"The key ID ",(0,r.kt)("inlineCode",{parentName:"li"},"e5ZaB46bF27d"),": loads from ",(0,r.kt)("inlineCode",{parentName:"li"},"/etc/gatekeeper/auth/jwt/verify_key2.pem"),"."),(0,r.kt)("li",{parentName:"ol"},"The key ID ",(0,r.kt)("inlineCode",{parentName:"li"},"3bc4be49abf6"),": loads the key from the file stored in the ",(0,r.kt)("inlineCode",{parentName:"li"},"VERIFY_KEY_FILE"),"\nenvironment variable."),(0,r.kt)("li",{parentName:"ol"},"The key ID ",(0,r.kt)("inlineCode",{parentName:"li"},"pik3mfhsXR1B"),": loads the keys from the directory stored in the\nenvironment variable ",(0,r.kt)("inlineCode",{parentName:"li"},"VERIFY_KEY_DIR"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{\n  security {\n    authorization policy mypolicy {\n      crypto key verify from file /etc/gatekeeper/auth/jwt/verify_key1.pem\n      crypto key e5ZaB46bF27d verify from file /etc/gatekeeper/auth/jwt/verify_key2.pem\n      crypto key 3bc4be49abf6 verify from env VERIFY_KEY_FILE as file\n      crypto key pik3mfhsXR1B verify from env VERIFY_KEY_DIR as directory\n    }\n  }\n}\n\nassetq.myfiosgateway.com {\n  authorize with mypolicy\n  root * {env.HOME}/www\n  file_server\n}\n")),(0,r.kt)("p",null,"Additionally, there could be a directory with public PEM keys."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{\n  security {\n    authorization policy mypolicy {\n      crypto key e5ZaB46bF27d verify from directory /etc/gatekeeper/auth/jwt\n      crypto key 3bc4be49abf6 verify from env VERIFY_KEY_DIR as directory\n    }\n  }\n}\n\nassetq.myfiosgateway.com {\n  authorize with mypolicy\n  root * {env.HOME}/www\n  file_server\n}\n\n")),(0,r.kt)("p",null,"The syntax is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"crypto key <ID> verify from <directory|file> <PATH>\ncrypto key <ID> verify from env <NAME> as <directory|file|value>\n")),(0,r.kt)("h3",{id:"generate-rsa-public-key"},"Generate RSA Public Key"),(0,r.kt)("p",null,"Th ",(0,r.kt)("inlineCode",{parentName:"p"},"verify_key1.pem")," is RSA public key. It is generated with\nthe following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"openssl genrsa -out /etc/gatekeeper/auth/jwt/sign_key1.pem 2048\nopenssl rsa -in /etc/gatekeeper/auth/jwt/sign_key1.pem -pubout -out /etc/gatekeeper/auth/jwt/verify_key1.pem\n")),(0,r.kt)("p",null,"The content of ",(0,r.kt)("inlineCode",{parentName:"p"},"verify_key1.pem")," follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAphJPa8M0D/iY/I6kAs7K\n4M30kPfurFEwpJe4zd9h9E/iuWbqpHCx+sQqAG8xJawddG6WupZiWRY3+44hw7nH\nsrH7XY2Dv/6igo1WU6U0PjHQ0SRSKGkGb3x4iwHx8IMsUQ44iDZYugxrjf5xkthc\n6MNwqqcTuHLJtgEqSPETiqZgbcRHEWtqPb/LuQl3hLscokO7e5Yw0LQibtnZt4UR\nWb3z9CrzP8yS2Ibf8vbhiVhzYWSkXOiwsA0X5sBdNZbg8AkkqgyVe2FtCPBPdW6/\nKOj8geX+P2Wms6msOZIRk7FqpKfEiK//arjumEsVF34S7GPavynLmyLfC4j9DcFI\nPQIDAQAB\n-----END PUBLIC KEY-----\n")),(0,r.kt)("h3",{id:"generate-ecdsa-public-key"},"Generate ECDSA Public Key"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"verify_key1.pem")," is generated with the following commands."),(0,r.kt)("p",null,"First, review the output of the following command to determine the\navailable Elliptic Curves."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ openssl ecparam -list_curves\n  secp224r1 : NIST/SECG curve over a 224 bit prime field\n  secp256k1 : SECG curve over a 256 bit prime field\n  secp384r1 : NIST/SECG curve over a 384 bit prime field\n  secp521r1 : NIST/SECG curve over a 521 bit prime field\n  prime256v1: X9.62/SECG curve over a 256 bit prime field\n")),(0,r.kt)("p",null,"Next, generate ",(0,r.kt)("inlineCode",{parentName:"p"},"ES256")," private and public key pair:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"openssl ecparam -genkey -name prime256v1 -noout \\\n  -out /etc/gatekeeper/auth/jwt/sign_key2.pem\nopenssl ec -in /etc/gatekeeper/auth/jwt/sign_key2.pem -pubout \\\n  -out /etc/gatekeeper/auth/jwt/verify_key2.pem\n")),(0,r.kt)("p",null,"The content of ",(0,r.kt)("inlineCode",{parentName:"p"},"verify_key2")," follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEwlCJyaA2uhZ29yhDkmsSm6nEageO\ne0rB8fQM/g4WpLtz1AbPVZq9mjFHz390r7b2Dz6P/fNYqk5joikWVXrJ9g==\n-----END PUBLIC KEY-----\n")),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"ES384")," use ",(0,r.kt)("inlineCode",{parentName:"p"},"-name secp384r1")," argument."),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"ES512")," use ",(0,r.kt)("inlineCode",{parentName:"p"},"-name secp521r1")," argument."))}s.isMDXComponent=!0}}]);