"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6299],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||l;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var c=2;c<l;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5022:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var o=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],r={sidebar_position:9},s="Access Lists and Role-based Access Control (RBAC)",c={unversionedId:"authorize/acl-rbac",id:"authorize/acl-rbac",isDocsHomePage:!1,title:"Access Lists and Role-based Access Control (RBAC)",description:"The allow and deny directives are the series of entries defining how to",source:"@site/docs/authorize/acl-rbac.md",sourceDirName:"authorize",slug:"/authorize/acl-rbac",permalink:"/docs/authorize/acl-rbac",editUrl:"https://github.com/authp/authp.github.io/edit/main/docs/authorize/acl-rbac.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Auto-Redirect URL",permalink:"/docs/authorize/auto-redirect-url"},next:{title:"Path-Based Access Lists",permalink:"/docs/authorize/path-acl"}},p=[{value:"Sources of Role Information",id:"sources-of-role-information",children:[],level:2},{value:"Anonymous Role",id:"anonymous-role",children:[],level:2},{value:"Granting Access with Access Lists",id:"granting-access-with-access-lists",children:[{value:"Comment",id:"comment",children:[],level:3},{value:"Conditions",id:"conditions",children:[],level:3},{value:"Actions",id:"actions",children:[],level:3},{value:"ACL Shortcuts",id:"acl-shortcuts",children:[],level:3},{value:"Primer",id:"primer",children:[],level:3}],level:2},{value:"Default Allow ACL",id:"default-allow-acl",children:[],level:2},{value:"Forbidden Access",id:"forbidden-access",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"access-lists-and-role-based-access-control-rbac"},"Access Lists and Role-based Access Control (RBAC)"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"allow")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"deny"),' directives are the series of entries defining how to\nauthorize claims. In the above example, the plugin authorizes access for the holders of "roles"\nclaim where values are any of the following: "anonymous", "guest", "admin".'),(0,l.kt)("h2",{id:"sources-of-role-information"},"Sources of Role Information"),(0,l.kt)("p",null,"By default, the plugin finds role information in the following token fields:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"roles")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"role")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"group")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"groups")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"app_metadata")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"authorization")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"roles")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"realm_access")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"roles"))),(0,l.kt)("p",null,"In the below example, the use has a single role, i.e. ",(0,l.kt)("inlineCode",{parentName:"p"},"anonymous"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "exp": 1596031874,\n  "sub": "jsmith",\n  "name": "Smith, John",\n  "email": "jsmith@gmail.com",\n  "roles": [\n    "anonymous"\n  ],\n  "origin": "localhost"\n}\n')),(0,l.kt)("p",null,"Additionally, the token validation component of the plugin recognized that roles\nmay be in other parts of a token, e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"app_metadata - authorization - roles"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "app_metadata": {\n    "authorization": {\n      "roles": ["admin", "editor"]\n    }\n  }\n}\n')),(0,l.kt)("p",null,"Additionally, ",(0,l.kt)("inlineCode",{parentName:"p"},"realm_access")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"roles"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "realm_access": {\n    "roles": ["admin", "editor"]\n  }\n}\n')),(0,l.kt)("p",null,"References:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://auth0.com/docs/users/concepts/overview-user-metadata"},"Auth0 Docs - App Metadata")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://docs.netlify.com/visitor-access/role-based-access-control/#external-providers"},"Netlify - Role-based access control with JWT - External providers"))),(0,l.kt)("h2",{id:"anonymous-role"},"Anonymous Role"),(0,l.kt)("p",null,"By default, if the plugin does not find role information in JWT token, then\nautomatically treats the token having the following two roles:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"anonymous")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"guest"))),(0,l.kt)("p",null,"For example, it happens when:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"roles")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"app_metadata")," are not present in a token"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"app_metadata")," does not contain ",(0,l.kt)("inlineCode",{parentName:"li"},"authorization"))),(0,l.kt)("h2",{id:"granting-access-with-access-lists"},"Granting Access with Access Lists"),(0,l.kt)("p",null,"Access list rule consists of 3 sections:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Comment"),(0,l.kt)("li",{parentName:"ul"},"Conditions"),(0,l.kt)("li",{parentName:"ul"},"Actions")),(0,l.kt)("p",null,"The rule has the following syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"acl rule {\n  comment\n  conditions\n  action\n}\n")),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"acl rule {\n  comment Allow viewer and editor access, log, count, and stop processing\n  match roles viewer editor\n  allow stop counter log debug\n}\n")),(0,l.kt)("h3",{id:"comment"},"Comment"),(0,l.kt)("p",null,"The comment section is a string to identify a rule."),(0,l.kt)("p",null,"The section is a single statement."),(0,l.kt)("h3",{id:"conditions"},"Conditions"),(0,l.kt)("p",null,"The conditions section consists of one or more statements matching the fields\nof a token."),(0,l.kt)("p",null,"There are the types of conditions:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"match the value of a particular token field, e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"roles")),(0,l.kt)("li",{parentName:"ol"},"match the HTTP method, e.g. GET, POST, etc."),(0,l.kt)("li",{parentName:"ol"},"match the HTTP URI path, e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"/api"))),(0,l.kt)("p",null,"The condition syntax follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[exact|partial|prefix|suffix|regex|always] match <field> <value> ... <valueN>\n[exact|partial|prefix|suffix|regex|always] match method <http_method_name>\n[exact|partial|prefix|suffix|regex|always] match path <http_path_uri>\n")),(0,l.kt)("p",null,"The special use case is the value of ",(0,l.kt)("inlineCode",{parentName:"p"},"any")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"always")," keyword. If provided,\nit matches any value in a token field. It is synonymous to the field being\npresent. For example, the following condition match when a token has ",(0,l.kt)("inlineCode",{parentName:"p"},"org"),"\nfield. The value of the field is not being checked"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"always match org any\n")),(0,l.kt)("p",null,"The following conditions match when a token has ",(0,l.kt)("inlineCode",{parentName:"p"},"roles")," field with the values\nof either ",(0,l.kt)("inlineCode",{parentName:"p"},"viewer")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"editor")," and has ",(0,l.kt)("inlineCode",{parentName:"p"},"org")," field with the value of ",(0,l.kt)("inlineCode",{parentName:"p"},"nyc"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"match roles viewer editor\nmatch org nyc\n")),(0,l.kt)("p",null,"The following conditions match when a token has ",(0,l.kt)("inlineCode",{parentName:"p"},"roles")," field with the values\nof either ",(0,l.kt)("inlineCode",{parentName:"p"},"viewer")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"editor")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"org")," field begins with ",(0,l.kt)("inlineCode",{parentName:"p"},"ny"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"match roles viewer editor\nprefix match org ny\n")),(0,l.kt)("h3",{id:"actions"},"Actions"),(0,l.kt)("p",null,"The actions section is a single line instructing how to deal with a token\nwhich matches the conditions."),(0,l.kt)("p",null,"The potential values for actions follow. Please note the first keyword\ncould be ",(0,l.kt)("inlineCode",{parentName:"p"},"allow")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"deny"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"allow\nallow counter\nallow counter log <error|warn|info|debug>\nallow log <error|warn|info|debug>\nallow log <error|warn|info|debug> tag <value>\nallow stop\nallow stop counter\nallow stop counter log <error|warn|info|debug>\nallow stop log <error|warn|info|debug>\nallow any\nallow any counter\nallow any counter log <error|warn|info|debug>\nallow any log <error|warn|info|debug>\nallow any stop\nallow any stop counter\nallow any stop counter log <error|warn|info|debug>\nallow any stop log <error|warn|info|debug>\n")),(0,l.kt)("p",null,"By default the ACL rule hits are not being logged or counted."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"log <error|warn|info|debug>")," keyword enables the logging of rule hits.\nIf the log level is not being set, it defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"info"),"."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"tag")," keyword instructs the plugin to add a tag to the log output."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"counter")," keyword enables the counting of hits. The counters could be\nexposed with prometheus exporter."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"stop")," keyword instructs the plugin to stop processing ACL rules after\nthe processing the one with the ",(0,l.kt)("inlineCode",{parentName:"p"},"stop")," keyword."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"any")," keyword instructs the plugin to trigger actions when any of the\nconditions match. By default, all the conditions must match to trigger\nactions."),(0,l.kt)("h3",{id:"acl-shortcuts"},"ACL Shortcuts"),(0,l.kt)("p",null,"Here are the patterns of one-liner allowed for use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"allow roles viewer editor with method get /internal/dashboard\nallow roles viewer editor with method post\ndeny roles anonymous guest with method get /internal/dashboard\ndeny roles anonymous guest with method post\nallow roles anonymous guest\nallow audience https://localhost/ https://example.com/\n")),(0,l.kt)("h3",{id:"primer"},"Primer"),(0,l.kt)("p",null,"Please review configuration files\nin ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/greenpau/caddy-auth-docs/blob/main/assets/conf/"},"conf")," directory."),(0,l.kt)("h2",{id:"default-allow-acl"},"Default Allow ACL"),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"authorize"),' configuration contains the following directive, then the "catch-all"\naction is ',(0,l.kt)("inlineCode",{parentName:"p"},"allow"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"{\n  security {\n    authorization policy mypolicy {\n      acl default allow\n    }\n  }\n}\n")),(0,l.kt)("h2",{id:"forbidden-access"},"Forbidden Access"),(0,l.kt)("p",null,"By default, ",(0,l.kt)("inlineCode",{parentName:"p"},"caddyauth.Authenticator")," plugins should not set header or payload of the\nresponse. However, caddy, by default, responds with 401 (instead of 403),\nbecause ",(0,l.kt)("inlineCode",{parentName:"p"},"caddyauth.Authenticator")," does not distinguish between authorization (403)\nand authentication (401)."),(0,l.kt)("p",null,"The plugin's default behaviour is responding with ",(0,l.kt)("inlineCode",{parentName:"p"},"403 Forbidden"),"."),(0,l.kt)("p",null,"However, one could use the ",(0,l.kt)("inlineCode",{parentName:"p"},"set forbidden url")," Caddyfile directive to redirect\nusers to a custom 403 page."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"{\n  security {\n    authorization policy mypolicy {\n      set forbidden url /custom_403.html\n    }\n  }\n}\n")))}d.isMDXComponent=!0}}]);